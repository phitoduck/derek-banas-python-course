{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/","text":"Video 1: Variables and Data Types \u00b6 Table of Contents \u00b6 Introduction Rules for Naming Variables Strings Escape Sequences Number Data Types Booleans Dynamic Typing Casting Commenting Common Variable Errors Introduction \u00b6 The 1st thing to know is that all Python files end with the extension .py . Then you have to understand that every programming language must have the ability to Accept , Store and Name Data. You have to be able to receive data from the keyboard, or from other parts of your program and assign a name to that data. This data is either a single value or multiple values that are assigned a name. Data that is assigned a name and that contains data is called a Variable . Python has many different ways to store lists of data which I\u2019ll cover later. It is convenient to assign names to data. If I want to store my age in Python I\u2019d type my_age = 43 . If I wanted to store my name I\u2019d type my_name = \u201c Derek \u201d . Rules for Naming Variables \u00b6 Your variables can start with a letter or _ (Underscore) After the 1st letter you can use numbers such as num_1 You can\u2019t put spaces in variable names my_age is ok, but my age is not Tip It is considered good practice to separate words with underscores ( my_age vs. myAge ) Keywords that you can't use for variable names and , del , from , not , while , as , elif , global , or , with , assert , else , if , pass , yield , break , except , import , print , class , exec , in , raise , continue , finally , is , return , def , for , lambda , try Try running this code where you assign your name to a variable and then print a message. 1 2 my_name = \u201c Derek \u201d print ( \u201c Hello \u201d , my_name ) \u201cHello\u201d is known as a string. The print () function prints out the your screen the values between its parentheses. If you have multiple values separate them with commas. Data is stored in essentially boxes in your computers memory. The size of the box you assign is referred to as a data type. If you want to store values with decimal places you store that data in a float data type. If you want to store a series of characters, numbers, etc. you store in a string data type. Strings \u00b6 A String is a data type that starts and ends with a \u201c , \u2018 , or \u2018\u2019\u2019 and contains letters, numbers and other characters. If you find that you want to use a double quote inside of a String proceed it with a backslash like this. print ( \u201c \\ \u201d We never really grow up , we only learn how to act in public \\ \u201d - Bryan White \u201d ) Escape Sequences \u00b6 \\\u201d is one of many Escape Sequences . Here are other common Escape Sequences: Newline: \\n Backslash: \\\\ Single Quote: \\\u2019 Backspace: \\b Tab: \\t I\u2019ll do more with Strings later in the tutorial. Number Data Types \u00b6 There are 3 main number types in Python. Integers , floats and complex numbers . I\u2019ll cover complex numbers later. Integers are values that don\u2019t have decimal values. 3 , 8 , 100000 are integers. Floats contain decimal values. Pi for example is a float . There is no maximum value for an integer, as long as you have enough memory. You can however get a practical maximum size with this. Note that you\u2019ll have to import the sys module for this code to work. A module provides prewritten code you can use in your program. 1 2 import sys print ( sys . maxsize ) You can get the maximum size for a float like this 1 2 import sys print ( sys . float_info . max ) Please note however that errors can occur when using float s. This is true with all programming languages. When you create a variable a specific amount of space is set aside. If you create a value larger then that space allows errors can creep in. For example 1 2 3 4 f1 = 1.1111111111111111 f2 = 1.1111111111111111 f3 = f1 + f2 print ( f3 ) As you can see float s are accurate to 15 digits. Later I\u2019ll introduce data types with more accuracy. Here is an example of a complex number. I\u2019ll cover them in more detail later. cn1 = 5 + 6 j Booleans \u00b6 A boolean data type can have either a value of True or False . You\u2019ll see how extremely valuable they are later. can_vote = True Dynamic Typing \u00b6 Python is dynamically typed. What that means is a variables data type is determined by the value you assign to it. This is different from other languages. A variables value can also be changed even if that may sometimes not make sense. For example 1 2 my_age = 43 my_age = \u201c Dog \u201d Many errors can occur if you don\u2019t make sure you are using the correct values. Some times you will find the need to convert from one type to another. Casting \u00b6 Casting allows you to convert from one type to another. Here is how you cast to the different types. I\u2019ll use the type () function to display the new data type for each variable. 1 2 3 4 5 print ( \"Cast \" , type ( int ( 5.4 ))) # float to int print ( \"Cast 2 \" , type ( str ( 5.4 ))) # float to string print ( \"Cast 3 \" , type ( chr ( 97 ))) # unicode character to string print ( \"Cast 4 \" , type ( ord ( 'a' ))) # character to unicode print ( \"Cast 5 \" , type ( float ( 2 ))) # integer to float Commenting \u00b6 You may have noticed the # symbol used in the code above. # is used when you want to comment about what your code is doing. Everything you type after a # is ignored. It is very important to comment your code because what you understand about your code today you may forget 3 months from now. You can also create multi-line comments like this \u2018\u2019\u2019 I \u2019 m a multi - line comment \u2018\u2019\u2019 Common Variable Errors \u00b6 Variable names are case sensitive. For example Age is not the same as age . 1 2 age = 2 Age = 3 Make sure you are casting to the correct data type when working with variables. Also make sure that you surround calculations with parentheses when they produce a single value. 1 2 3 num_1 = \u201c 1 \u201d num_2 = \u201c 2 \u201d print ( \u201c 1 + 2 = \u201c , ( int ( num_1 ) + int ( num_2 ))) That\u2019s all for now. In the next video we\u2019ll learn about accepting user input and performing math calculations. Please take this quiz to reenforce what you\u2019ve learned.","title":"Python Tutorial 1"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#video-1-variables-and-data-types","text":"","title":"Video 1: Variables and Data Types"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#table-of-contents","text":"Introduction Rules for Naming Variables Strings Escape Sequences Number Data Types Booleans Dynamic Typing Casting Commenting Common Variable Errors","title":"Table of Contents"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#introduction","text":"The 1st thing to know is that all Python files end with the extension .py . Then you have to understand that every programming language must have the ability to Accept , Store and Name Data. You have to be able to receive data from the keyboard, or from other parts of your program and assign a name to that data. This data is either a single value or multiple values that are assigned a name. Data that is assigned a name and that contains data is called a Variable . Python has many different ways to store lists of data which I\u2019ll cover later. It is convenient to assign names to data. If I want to store my age in Python I\u2019d type my_age = 43 . If I wanted to store my name I\u2019d type my_name = \u201c Derek \u201d .","title":"Introduction"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#rules-for-naming-variables","text":"Your variables can start with a letter or _ (Underscore) After the 1st letter you can use numbers such as num_1 You can\u2019t put spaces in variable names my_age is ok, but my age is not Tip It is considered good practice to separate words with underscores ( my_age vs. myAge ) Keywords that you can't use for variable names and , del , from , not , while , as , elif , global , or , with , assert , else , if , pass , yield , break , except , import , print , class , exec , in , raise , continue , finally , is , return , def , for , lambda , try Try running this code where you assign your name to a variable and then print a message. 1 2 my_name = \u201c Derek \u201d print ( \u201c Hello \u201d , my_name ) \u201cHello\u201d is known as a string. The print () function prints out the your screen the values between its parentheses. If you have multiple values separate them with commas. Data is stored in essentially boxes in your computers memory. The size of the box you assign is referred to as a data type. If you want to store values with decimal places you store that data in a float data type. If you want to store a series of characters, numbers, etc. you store in a string data type.","title":"Rules for Naming Variables"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#strings","text":"A String is a data type that starts and ends with a \u201c , \u2018 , or \u2018\u2019\u2019 and contains letters, numbers and other characters. If you find that you want to use a double quote inside of a String proceed it with a backslash like this. print ( \u201c \\ \u201d We never really grow up , we only learn how to act in public \\ \u201d - Bryan White \u201d )","title":"Strings"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#escape-sequences","text":"\\\u201d is one of many Escape Sequences . Here are other common Escape Sequences: Newline: \\n Backslash: \\\\ Single Quote: \\\u2019 Backspace: \\b Tab: \\t I\u2019ll do more with Strings later in the tutorial.","title":"Escape Sequences"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#number-data-types","text":"There are 3 main number types in Python. Integers , floats and complex numbers . I\u2019ll cover complex numbers later. Integers are values that don\u2019t have decimal values. 3 , 8 , 100000 are integers. Floats contain decimal values. Pi for example is a float . There is no maximum value for an integer, as long as you have enough memory. You can however get a practical maximum size with this. Note that you\u2019ll have to import the sys module for this code to work. A module provides prewritten code you can use in your program. 1 2 import sys print ( sys . maxsize ) You can get the maximum size for a float like this 1 2 import sys print ( sys . float_info . max ) Please note however that errors can occur when using float s. This is true with all programming languages. When you create a variable a specific amount of space is set aside. If you create a value larger then that space allows errors can creep in. For example 1 2 3 4 f1 = 1.1111111111111111 f2 = 1.1111111111111111 f3 = f1 + f2 print ( f3 ) As you can see float s are accurate to 15 digits. Later I\u2019ll introduce data types with more accuracy. Here is an example of a complex number. I\u2019ll cover them in more detail later. cn1 = 5 + 6 j","title":"Number Data Types"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#booleans","text":"A boolean data type can have either a value of True or False . You\u2019ll see how extremely valuable they are later. can_vote = True","title":"Booleans"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#dynamic-typing","text":"Python is dynamically typed. What that means is a variables data type is determined by the value you assign to it. This is different from other languages. A variables value can also be changed even if that may sometimes not make sense. For example 1 2 my_age = 43 my_age = \u201c Dog \u201d Many errors can occur if you don\u2019t make sure you are using the correct values. Some times you will find the need to convert from one type to another.","title":"Dynamic Typing"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#casting","text":"Casting allows you to convert from one type to another. Here is how you cast to the different types. I\u2019ll use the type () function to display the new data type for each variable. 1 2 3 4 5 print ( \"Cast \" , type ( int ( 5.4 ))) # float to int print ( \"Cast 2 \" , type ( str ( 5.4 ))) # float to string print ( \"Cast 3 \" , type ( chr ( 97 ))) # unicode character to string print ( \"Cast 4 \" , type ( ord ( 'a' ))) # character to unicode print ( \"Cast 5 \" , type ( float ( 2 ))) # integer to float","title":"Casting"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#commenting","text":"You may have noticed the # symbol used in the code above. # is used when you want to comment about what your code is doing. Everything you type after a # is ignored. It is very important to comment your code because what you understand about your code today you may forget 3 months from now. You can also create multi-line comments like this \u2018\u2019\u2019 I \u2019 m a multi - line comment \u2018\u2019\u2019","title":"Commenting"},{"location":"Section%203%3A%20Variables%20-%20Data%20Types%20-%20Casting/Python%20Tutorial%201/#common-variable-errors","text":"Variable names are case sensitive. For example Age is not the same as age . 1 2 age = 2 Age = 3 Make sure you are casting to the correct data type when working with variables. Also make sure that you surround calculations with parentheses when they produce a single value. 1 2 3 num_1 = \u201c 1 \u201d num_2 = \u201c 2 \u201d print ( \u201c 1 + 2 = \u201c , ( int ( num_1 ) + int ( num_2 ))) That\u2019s all for now. In the next video we\u2019ll learn about accepting user input and performing math calculations. Please take this quiz to reenforce what you\u2019ve learned.","title":"Common Variable Errors"}]}